{"Enums/AWSKinesisVideoWebRTCStorageErrorType.html#/c:@E@AWSKinesisVideoWebRTCStorageErrorType@AWSKinesisVideoWebRTCStorageErrorUnknown":{"name":"AWSKinesisVideoWebRTCStorageErrorUnknown","abstract":"<p>Undocumented</p>","parent_name":"AWSKinesisVideoWebRTCStorageErrorType"},"Enums/AWSKinesisVideoWebRTCStorageErrorType.html#/c:@E@AWSKinesisVideoWebRTCStorageErrorType@AWSKinesisVideoWebRTCStorageErrorAccessDenied":{"name":"AWSKinesisVideoWebRTCStorageErrorAccessDenied","abstract":"<p>Undocumented</p>","parent_name":"AWSKinesisVideoWebRTCStorageErrorType"},"Enums/AWSKinesisVideoWebRTCStorageErrorType.html#/c:@E@AWSKinesisVideoWebRTCStorageErrorType@AWSKinesisVideoWebRTCStorageErrorClientLimitExceeded":{"name":"AWSKinesisVideoWebRTCStorageErrorClientLimitExceeded","abstract":"<p>Undocumented</p>","parent_name":"AWSKinesisVideoWebRTCStorageErrorType"},"Enums/AWSKinesisVideoWebRTCStorageErrorType.html#/c:@E@AWSKinesisVideoWebRTCStorageErrorType@AWSKinesisVideoWebRTCStorageErrorInvalidArgument":{"name":"AWSKinesisVideoWebRTCStorageErrorInvalidArgument","abstract":"<p>Undocumented</p>","parent_name":"AWSKinesisVideoWebRTCStorageErrorType"},"Enums/AWSKinesisVideoWebRTCStorageErrorType.html#/c:@E@AWSKinesisVideoWebRTCStorageErrorType@AWSKinesisVideoWebRTCStorageErrorResourceNotFound":{"name":"AWSKinesisVideoWebRTCStorageErrorResourceNotFound","abstract":"<p>Undocumented</p>","parent_name":"AWSKinesisVideoWebRTCStorageErrorType"},"Enums/AWSKinesisVideoWebRTCStorageErrorType.html":{"name":"AWSKinesisVideoWebRTCStorageErrorType","abstract":"<p>Undocumented</p>"},"Constants.html#/c:@AWSKinesisVideoWebRTCStorageVersionNumber":{"name":"AWSKinesisVideoWebRTCStorageVersionNumber","abstract":"<p>Undocumented</p>"},"Constants.html#/c:@AWSKinesisVideoWebRTCStorageVersionString":{"name":"AWSKinesisVideoWebRTCStorageVersionString","abstract":"<p>Undocumented</p>"},"Constants.html#/c:@AWSKinesisVideoWebRTCStorageErrorDomain":{"name":"AWSKinesisVideoWebRTCStorageErrorDomain","abstract":"<p>Undocumented</p>"},"Constants.html#/c:@AWSKinesisVideoWebRTCStorageSDKVersion":{"name":"AWSKinesisVideoWebRTCStorageSDKVersion","abstract":"<p>Undocumented</p>"},"Classes/AWSKinesisVideoWebRTCStorage.html#/c:objc(cs)AWSKinesisVideoWebRTCStorage(py)configuration":{"name":"configuration","abstract":"<p>The service configuration used to instantiate this service client.</p>","parent_name":"AWSKinesisVideoWebRTCStorage"},"Classes/AWSKinesisVideoWebRTCStorage.html#/c:objc(cs)AWSKinesisVideoWebRTCStorage(cm)defaultKinesisVideoWebRTCStorage":{"name":"+defaultKinesisVideoWebRTCStorage","abstract":"<p>Returns the singleton service client. If the singleton object does not exist, the SDK instantiates the default service client with <code>defaultServiceConfiguration</code> from <code>[AWSServiceManager defaultServiceManager]</code>. The reference to this object is maintained by the SDK, and you do not need to retain it manually.</p>","parent_name":"AWSKinesisVideoWebRTCStorage"},"Classes/AWSKinesisVideoWebRTCStorage.html#/c:objc(cs)AWSKinesisVideoWebRTCStorage(cm)registerKinesisVideoWebRTCStorageWithConfiguration:forKey:":{"name":"+registerKinesisVideoWebRTCStorageWithConfiguration:forKey:","abstract":"<p>Creates a service client with the given service configuration and registers it for the key.</p>","parent_name":"AWSKinesisVideoWebRTCStorage"},"Classes/AWSKinesisVideoWebRTCStorage.html#/c:objc(cs)AWSKinesisVideoWebRTCStorage(cm)KinesisVideoWebRTCStorageForKey:":{"name":"+KinesisVideoWebRTCStorageForKey:","abstract":"<p>Retrieves the service client associated with the key. You need to call <code>+ registerKinesisVideoWebRTCStorageWithConfiguration:forKey:</code> before invoking this method.</p>","parent_name":"AWSKinesisVideoWebRTCStorage"},"Classes/AWSKinesisVideoWebRTCStorage.html#/c:objc(cs)AWSKinesisVideoWebRTCStorage(cm)removeKinesisVideoWebRTCStorageForKey:":{"name":"+removeKinesisVideoWebRTCStorageForKey:","abstract":"<p>Removes the service client associated with the key and release it.</p>","parent_name":"AWSKinesisVideoWebRTCStorage"},"Classes/AWSKinesisVideoWebRTCStorage.html#/c:objc(cs)AWSKinesisVideoWebRTCStorage(im)joinStorageSession:":{"name":"-joinStorageSession:","abstract":"<p><p> Join the ongoing one way-video and/or multi-way audio WebRTC session as a video producing device for an input channel. If there’s no existing session for the channel, a new streaming session needs to be created, and the Amazon Resource Name (ARN) of the signaling channel must be provided. </p><p>Currently for the <code>SINGLE_MASTER</code> type, a video producing device is able to ingest both audio and video media into a stream, while viewers can only ingest audio. Both a video producing device and viewers can join the session first, and wait for other participants.</p><p>While participants are having peer to peer conversations through webRTC, the ingested media session will be stored into the Kinesis Video Stream. Multiple viewers are able to playback real-time media.</p><p>Customers can also use existing Kinesis Video Streams features like <code>HLS</code> or <code>DASH</code> playback, Image generation, and more with ingested WebRTC media.</p><note><p>Assume that only one video producing device client can be associated with a session for the channel. If more than one client joins the session of a specific channel as a video producing device, the most recent client request takes precedence. </p></note></p>","parent_name":"AWSKinesisVideoWebRTCStorage"},"Classes/AWSKinesisVideoWebRTCStorage.html#/c:objc(cs)AWSKinesisVideoWebRTCStorage(im)joinStorageSession:completionHandler:":{"name":"-joinStorageSession:completionHandler:","abstract":"<p><p> Join the ongoing one way-video and/or multi-way audio WebRTC session as a video producing device for an input channel. If there’s no existing session for the channel, a new streaming session needs to be created, and the Amazon Resource Name (ARN) of the signaling channel must be provided. </p><p>Currently for the <code>SINGLE_MASTER</code> type, a video producing device is able to ingest both audio and video media into a stream, while viewers can only ingest audio. Both a video producing device and viewers can join the session first, and wait for other participants.</p><p>While participants are having peer to peer conversations through webRTC, the ingested media session will be stored into the Kinesis Video Stream. Multiple viewers are able to playback real-time media.</p><p>Customers can also use existing Kinesis Video Streams features like <code>HLS</code> or <code>DASH</code> playback, Image generation, and more with ingested WebRTC media.</p><note><p>Assume that only one video producing device client can be associated with a session for the channel. If more than one client joins the session of a specific channel as a video producing device, the most recent client request takes precedence. </p></note></p>","parent_name":"AWSKinesisVideoWebRTCStorage"},"Classes/AWSKinesisVideoWebRTCStorage.html#/c:objc(cs)AWSKinesisVideoWebRTCStorage(im)joinStorageSessionAsViewer:":{"name":"-joinStorageSessionAsViewer:","abstract":"<p> Join the ongoing one way-video and/or multi-way audio WebRTC session as a viewer for an input channel. If there’s no existing session for the channel, create a new streaming session and provide the Amazon Resource Name (ARN) of the signaling channel (<code>channelArn</code>) and client id (<code>clientId</code>). </p><p>Currently for <code>SINGLE_MASTER</code> type, a video producing device is able to ingest both audio and video media into a stream, while viewers can only ingest audio. Both a video producing device and viewers can join a session first and wait for other participants. While participants are having peer to peer conversations through webRTC, the ingested media session will be stored into the Kinesis Video Stream. Multiple viewers are able to playback real-time media. </p><p>Customers can also use existing Kinesis Video Streams features like <code>HLS</code> or <code>DASH</code> playback, Image generation, and more with ingested WebRTC media. If there’s an existing session with the same <code>clientId</code> that&rsquo;s found in the join session request, the new request takes precedence.</p>","parent_name":"AWSKinesisVideoWebRTCStorage"},"Classes/AWSKinesisVideoWebRTCStorage.html#/c:objc(cs)AWSKinesisVideoWebRTCStorage(im)joinStorageSessionAsViewer:completionHandler:":{"name":"-joinStorageSessionAsViewer:completionHandler:","abstract":"<p> Join the ongoing one way-video and/or multi-way audio WebRTC session as a viewer for an input channel. If there’s no existing session for the channel, create a new streaming session and provide the Amazon Resource Name (ARN) of the signaling channel (<code>channelArn</code>) and client id (<code>clientId</code>). </p><p>Currently for <code>SINGLE_MASTER</code> type, a video producing device is able to ingest both audio and video media into a stream, while viewers can only ingest audio. Both a video producing device and viewers can join a session first and wait for other participants. While participants are having peer to peer conversations through webRTC, the ingested media session will be stored into the Kinesis Video Stream. Multiple viewers are able to playback real-time media. </p><p>Customers can also use existing Kinesis Video Streams features like <code>HLS</code> or <code>DASH</code> playback, Image generation, and more with ingested WebRTC media. If there’s an existing session with the same <code>clientId</code> that&rsquo;s found in the join session request, the new request takes precedence.</p>","parent_name":"AWSKinesisVideoWebRTCStorage"},"Classes/AWSKinesisVideoWebRTCStorageResources.html#/c:objc(cs)AWSKinesisVideoWebRTCStorageResources(cm)sharedInstance":{"name":"+sharedInstance","abstract":"<p>Undocumented</p>","parent_name":"AWSKinesisVideoWebRTCStorageResources"},"Classes/AWSKinesisVideoWebRTCStorageResources.html#/c:objc(cs)AWSKinesisVideoWebRTCStorageResources(im)JSONObject":{"name":"-JSONObject","abstract":"<p>Undocumented</p>","parent_name":"AWSKinesisVideoWebRTCStorageResources"},"Classes/AWSKinesisVideoWebRTCStorageJoinStorageSessionInput.html#/c:objc(cs)AWSKinesisVideoWebRTCStorageJoinStorageSessionInput(py)channelArn":{"name":"channelArn","abstract":"<p> The Amazon Resource Name (ARN) of the signaling channel. </p>","parent_name":"AWSKinesisVideoWebRTCStorageJoinStorageSessionInput"},"Classes/AWSKinesisVideoWebRTCStorageJoinStorageSessionAsViewerInput.html#/c:objc(cs)AWSKinesisVideoWebRTCStorageJoinStorageSessionAsViewerInput(py)channelArn":{"name":"channelArn","abstract":"<p> The Amazon Resource Name (ARN) of the signaling channel. </p>","parent_name":"AWSKinesisVideoWebRTCStorageJoinStorageSessionAsViewerInput"},"Classes/AWSKinesisVideoWebRTCStorageJoinStorageSessionAsViewerInput.html#/c:objc(cs)AWSKinesisVideoWebRTCStorageJoinStorageSessionAsViewerInput(py)clientId":{"name":"clientId","abstract":"<p> The unique identifier for the sender client. </p>","parent_name":"AWSKinesisVideoWebRTCStorageJoinStorageSessionAsViewerInput"},"Classes/AWSKinesisVideoWebRTCStorageJoinStorageSessionAsViewerInput.html":{"name":"AWSKinesisVideoWebRTCStorageJoinStorageSessionAsViewerInput"},"Classes/AWSKinesisVideoWebRTCStorageJoinStorageSessionInput.html":{"name":"AWSKinesisVideoWebRTCStorageJoinStorageSessionInput"},"Classes/AWSKinesisVideoWebRTCStorageResources.html":{"name":"AWSKinesisVideoWebRTCStorageResources","abstract":"<p>Undocumented</p>"},"Classes/AWSKinesisVideoWebRTCStorage.html":{"name":"AWSKinesisVideoWebRTCStorage","abstract":"<p></p>"},"Classes.html":{"name":"Classes","abstract":"<p>The following classes are available globally.</p>"},"Constants.html":{"name":"Constants","abstract":"<p>The following constants are available globally.</p>"},"Enums.html":{"name":"Enumerations","abstract":"<p>The following enumerations are available globally.</p>"}}